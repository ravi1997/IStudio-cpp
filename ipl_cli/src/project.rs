use std::fs;\nuse std::io::Write;\nuse std::path::Path;\n\n#[derive(Debug)]\npub struct ProjectManager;\n\nimpl ProjectManager {\n    pub fn new() -> Self {\n        ProjectManager\n    }\n\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\n        // Create project directory\n        fs::create_dir(name)?;\n        \n        // Create the source directory structure\n        let src_dir = format!(\"{}/src\", name);\n        fs::create_dir(&src_dir)?;\n        \n        // Create the lib directory structure\n        let lib_dir = format!(\"{}/lib\", name);\n        fs::create_dir(&lib_dir)?;\n        \n        // Create the include directory structure\n        let include_dir = format!(\"{}/include\", name);\n        fs::create_dir(&include_dir)?;\n        \n        // Create the examples directory\n        let examples_dir = format!(\"{}/examples\", name);\n        fs::create_dir(&examples_dir)?;\n        \n        // Create the main IPL source file\n        let main_ipl = format!(\"{}/main.ipl\", src_dir);\n        let mut main_file = fs::File::create(&main_ipl)?;\n        writeln!(main_file, \"function main() : void {{\")?;\n        writeln!(main_file, \"    print(\\\"Hello, {}!\\\");\", name)?;\n        writeln!(main_file, \"}}\")?;\n\n        // Create the IPL configuration file\n        let config_file = format!(\"{}/ipl.yaml\", name);\n        let mut config = fs::File::create(&config_file)?;\n        writeln!(config, \"# IPL Project Configuration\")?;\n        writeln!(config, \"name: {}\", name)?;\n        writeln!(config, \"version: 0.1.0\")?;\n        writeln!(config, \"description: {}\", description)?;\n        writeln!(config, \"organization: {}\", org)?;\n        writeln!(config, \"main: src/main.ipl\")?;\n        writeln!(config, \"dependencies: {{}}\")?;\n        writeln!(config, \"targets:\")?;\n        writeln!(config, \"  - executable\")?;\n        writeln!(config, \"  - wasm\")?;\n        writeln!(config, \"  - js\")?;\n\n        // Create the build directory structure\n        let build_dir = format!(\"{}/build\", name);\n        fs::create_dir(&build_dir)?;\n        \n        // Create a basic CMakeLists.txt\n        let cmake_file = format!(\"{}/CMakeLists.txt\", name);\n        let mut cmake = fs::File::create(&cmake_file)?;\n        writeln!(cmake, \"cmake_minimum_required(VERSION 3.10)\")?;\n        writeln!(cmake, \"project({})\", name)?;\n        writeln!(cmake, \"\")?;\n        writeln!(cmake, \"# Set C++ standard\")?;\n        writeln!(cmake, \"set(CMAKE_CXX_STANDARD 17)\")?;\n        writeln!(cmake, \"\")?;\n        writeln!(cmake, \"# Find required packages\")?;\n        writeln!(cmake, \"# find_package(SomeRequiredPackage REQUIRED)\")?;\n        writeln!(cmake, \"\")?;\n        writeln!(cmake, \"# Add executable\")?;\n        writeln!(cmake, \"# add_executable({} src/main.cpp)\", name)?;  // This is for when we integrate with C++ compiler\n\n        // Create a README.md\n        let readme_file = format!(\"{}/README.md\", name);\n        let mut readme = fs::File::create(&readme_file)?;\n        writeln!(readme, \"# {}\", name)?;\n        writeln!(readme, \"\")?;\n        writeln!(readme, \"{}\", description)?;\n        writeln!(readme, \"\")?;\n        writeln!(readme, \"## Getting Started\")?;\n        writeln!(readme, \"\")?;\n        writeln!(readme, \"```bash\")?;\n        writeln!(readme, \"ipl get\")?;\n        writeln!(readme, \"ipl run\")?;\n        writeln!(readme, \"```\")?;\n\n        // Create a basic .gitignore\n        let gitignore_file = format!(\"{}/.gitignore\", name);\n        let mut gitignore = fs::File::create(&gitignore_file)?;\n        writeln!(gitignore, \"# Build artifacts\")?;\n        writeln!(gitignore, \"/build/\")?;\n        writeln!(gitignore, \"/dist/\")?;\n        writeln!(gitignore, \"/target/\")?;\n        writeln!(gitignore, \"\")?;\n        writeln!(gitignore, \"# IDE files\")?;\n        writeln!(gitignore, \".vscode/\")?;\n        writeln!(gitignore, \".idea/\")?;\n        writeln!(gitignore, \"*.swp\")?;\n        writeln!(gitignore, \"*.swo\")?;\n        writeln!(gitignore, \"\")?;\n        writeln!(gitignore, \"# OS files\")?;\n        writeln!(gitignore, \".DS_Store\")?;\n        writeln!(gitignore, \"Thumbs.db\")?;\n\n        Ok(())\n    }\n}