{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":12,"byte_end":13,"line_start":1,"line_end":1,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":33,"byte_end":34,"line_start":1,"line_end":1,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:34\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":55,"byte_end":56,"line_start":1,"line_end":1,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:56\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":57,"byte_end":58,"line_start":1,"line_end":1,"column_start":58,"column_end":59,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":58,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:58\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"prefix `n` is unknown","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":58,"byte_end":59,"line_start":1,"line_end":1,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":59,"highlight_end":60}],"label":"unknown prefix","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"prefixed identifiers and literals are reserved since Rust 2021","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider inserting whitespace here","code":null,"level":"help","spans":[{"file_name":"src/project.rs","byte_start":59,"byte_end":59,"line_start":1,"line_end":1,"column_start":60,"column_end":60,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":60,"highlight_end":60}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: prefix `n` is unknown\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:59\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown prefix\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: prefixed identifiers and literals are reserved since Rust 2021\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider inserting whitespace here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0m#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":75,"byte_end":76,"line_start":1,"line_end":1,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:76\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":103,"byte_end":104,"line_start":1,"line_end":1,"column_start":104,"column_end":105,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":104,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:104\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":105,"byte_end":106,"line_start":1,"line_end":1,"column_start":106,"column_end":107,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":106,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:106\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":128,"byte_end":129,"line_start":1,"line_end":1,"column_start":129,"column_end":130,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":129,"highlight_end":130}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:129\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":156,"byte_end":157,"line_start":1,"line_end":1,"column_start":157,"column_end":158,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":157,"highlight_end":158}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:157\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mojectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":180,"byte_end":181,"line_start":1,"line_end":1,"column_start":181,"column_end":182,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":181,"highlight_end":182}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:181\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mojectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, d\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":187,"byte_end":188,"line_start":1,"line_end":1,"column_start":188,"column_end":189,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":188,"highlight_end":189}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:188\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mnager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, descript\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":189,"byte_end":190,"line_start":1,"line_end":1,"column_start":190,"column_end":191,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":190,"highlight_end":191}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:190\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mger {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, descriptio\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unknown start of token: \\","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":309,"byte_end":310,"line_start":1,"line_end":1,"column_start":310,"column_end":311,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":310,"highlight_end":311}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: unknown start of token: \\\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:310\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mtr, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this file contains an unclosed delimiter","code":null,"level":"error","spans":[{"file_name":"src/project.rs","byte_start":127,"byte_end":128,"line_start":1,"line_end":1,"column_start":128,"column_end":129,"is_primary":false,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":128,"highlight_end":129}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/project.rs","byte_start":308,"byte_end":309,"line_start":1,"line_end":1,"column_start":309,"column_end":310,"is_primary":false,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":309,"highlight_end":310}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/project.rs","byte_start":4367,"byte_end":4367,"line_start":1,"line_end":1,"column_start":4368,"column_end":4368,"is_primary":true,"text":[{"text":"use std::fs;\\nuse std::io::Write;\\nuse std::path::Path;\\n\\n#[derive(Debug)]\\npub struct ProjectManager;\\n\\nimpl ProjectManager {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}","highlight_start":4368,"highlight_end":4368}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: this file contains an unclosed delimiter\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/project.rs:1:4368\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mer {\\n    pub fn new() -> Self {\\n        ProjectManager\\n    }\\n\\n    pub fn create_project(&self, name: &str, org: &str, description: &str) -> Result<(), Box<dyn std::error::Error>> {\\n        // Create project directory\\n        fs::create_dir(name)?;\\n        \\n        // Create the source directory structure\\n        let src_dir = format!(\\\"{}/src\\\", name);\\n        fs::create_dir(&src_dir)?;\\n        \\n        // Create the lib directory structure\\n        let lib_dir = format!(\\\"{}/lib\\\", name);\\n        fs::create_dir(&lib_dir)?;\\n        \\n        // Create the include directory structure\\n        let include_dir = format!(\\\"{}/include\\\", name);\\n        fs::create_dir(&include_dir)?;\\n        \\n        // Create the examples directory\\n        let examples_dir = format!(\\\"{}/examples\\\", name);\\n        fs::create_dir(&examples_dir)?;\\n        \\n        // Create the main IPL source file\\n        let main_ipl = format!(\\\"{}/main.ipl\\\", src_dir);\\n        let mut main_file = fs::File::create(&main_ipl)?;\\n        writeln!(main_file, \\\"function main() : void {{\\\")?;\\n        writeln!(main_file, \\\"    print(\\\\\\\"Hello, {}!\\\\\\\");\\\", name)?;\\n        writeln!(main_file, \\\"}}\\\")?;\\n\\n        // Create the IPL configuration file\\n        let config_file = format!(\\\"{}/ipl.yaml\\\", name);\\n        let mut config = fs::File::create(&config_file)?;\\n        writeln!(config, \\\"# IPL Project Configuration\\\")?;\\n        writeln!(config, \\\"name: {}\\\", name)?;\\n        writeln!(config, \\\"version: 0.1.0\\\")?;\\n        writeln!(config, \\\"description: {}\\\", description)?;\\n        writeln!(config, \\\"organization: {}\\\", org)?;\\n        writeln!(config, \\\"main: src/main.ipl\\\")?;\\n        writeln!(config, \\\"dependencies: {{}}\\\")?;\\n        writeln!(config, \\\"targets:\\\")?;\\n        writeln!(config, \\\"  - executable\\\")?;\\n        writeln!(config, \\\"  - wasm\\\")?;\\n        writeln!(config, \\\"  - js\\\")?;\\n\\n        // Create the build directory structure\\n        let build_dir = format!(\\\"{}/build\\\", name);\\n        fs::create_dir(&build_dir)?;\\n        \\n        // Create a basic CMakeLists.txt\\n        let cmake_file = format!(\\\"{}/CMakeLists.txt\\\", name);\\n        let mut cmake = fs::File::create(&cmake_file)?;\\n        writeln!(cmake, \\\"cmake_minimum_required(VERSION 3.10)\\\")?;\\n        writeln!(cmake, \\\"project({})\\\", name)?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Set C++ standard\\\")?;\\n        writeln!(cmake, \\\"set(CMAKE_CXX_STANDARD 17)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Find required packages\\\")?;\\n        writeln!(cmake, \\\"# find_package(SomeRequiredPackage REQUIRED)\\\")?;\\n        writeln!(cmake, \\\"\\\")?;\\n        writeln!(cmake, \\\"# Add executable\\\")?;\\n        writeln!(cmake, \\\"# add_executable({} src/main.cpp)\\\", name)?;  // This is for when we integrate with C++ compiler\\n\\n        // Create a README.md\\n        let readme_file = format!(\\\"{}/README.md\\\", name);\\n        let mut readme = fs::File::create(&readme_file)?;\\n        writeln!(readme, \\\"# {}\\\", name)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"{}\\\", description)?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"## Getting Started\\\")?;\\n        writeln!(readme, \\\"\\\")?;\\n        writeln!(readme, \\\"```bash\\\")?;\\n        writeln!(readme, \\\"ipl get\\\")?;\\n        writeln!(readme, \\\"ipl run\\\")?;\\n        writeln!(readme, \\\"```\\\")?;\\n\\n        // Create a basic .gitignore\\n        let gitignore_file = format!(\\\"{}/.gitignore\\\", name);\\n        let mut gitignore = fs::File::create(&gitignore_file)?;\\n        writeln!(gitignore, \\\"# Build artifacts\\\")?;\\n        writeln!(gitignore, \\\"/build/\\\")?;\\n        writeln!(gitignore, \\\"/dist/\\\")?;\\n        writeln!(gitignore, \\\"/target/\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# IDE files\\\")?;\\n        writeln!(gitignore, \\\".vscode/\\\")?;\\n        writeln!(gitignore, \\\".idea/\\\")?;\\n        writeln!(gitignore, \\\"*.swp\\\")?;\\n        writeln!(gitignore, \\\"*.swo\\\")?;\\n        writeln!(gitignore, \\\"\\\")?;\\n        writeln!(gitignore, \\\"# OS files\\\")?;\\n        writeln!(gitignore, \\\".DS_Store\\\")?;\\n        writeln!(gitignore, \\\"Thumbs.db\\\")?;\\n\\n        Ok(())\\n    }\\n}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\u001b[0m                                                                                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\u001b[0mu001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 15 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 15 previous errors\u001b[0m\n\n"}
