# Rust Code Generation Rules
# Format: [NodeType]
# template=...
# mappings=...

[Program]
template=fn main() {{BODY}}
mappings=

[Function]
template=fn {{NAME}}({{PARAMS}}) -> {{RETURN_TYPE}} {{BODY}}
mappings=int=i32,float=f32,double=f64,bool=bool,string=String,void=()

[VariableDeclaration]
template=let {{NAME}}: {{TYPE}} = {{INIT_VALUE}};
mappings=int=i32,float=f32,double=f64,bool=bool,string=String

[Assignment]
template={{VARIABLE}} = {{VALUE}};
mappings=

[BinaryOperation]
template={{LEFT}} {{OPERATOR}} {{RIGHT}}
mappings=

[UnaryOperation]
template={{OPERATOR}}{{OPERAND}}
mappings=

[CallExpression]
template={{CALLEE}}({{ARGS}})
mappings=

[Literal]
template={{VALUE}}
mappings=

[Block]
template={{BODY}}
mappings=

[Return]
template=return {{VALUE}};
mappings=

[If]
template=if {{CONDITION}} {{THEN_BRANCH}} else {{ELSE_BRANCH}}
mappings=

[While]
template=while {{CONDITION}} {{BODY}}
mappings=

[For]
template=for {{INIT}}; {{CONDITION}}; {{INCREMENT}} {{BODY}}
mappings=